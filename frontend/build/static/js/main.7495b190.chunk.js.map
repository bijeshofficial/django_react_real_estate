{"version":3,"sources":["reducers/alert.js","reducers/auth.js","reducers/index.js","actions/types.js","store.js","containers/Home.js","containers/About.js","containers/Contact.js","containers/Listings.js","containers/ListingDetail.js","containers/Login.js","containers/SignUp.js","components/NotFound.js","components/Navbar.js","hocs/Layout.js","App.js","serviceWorker.js","index.js"],"names":["initialState","token","localStorage","getItem","isAuthenticated","loading","combineReducers","alert","state","action","type","payload","filter","id","auth","setItem","access","removeItem","middleware","thunk","store","createStore","rootReducers","componentWithDevTools","applyMiddleware","home","about","contact","listings","listingDetail","login","signUp","notFound","className","navbar","layout","props","Navbar","children","App","Layout","exact","path","component","Home","About","Contact","Listings","LisitngDetail","Login","SignUp","NotFound","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAEMA,EAAe,G,OCMfA,EAAe,CACnBC,MAAOC,aAAaC,QAAQ,SAC5BC,gBAAiB,KACjBC,SAAS,GCPIC,4BAAgB,CAC7BC,MFDa,WAAyC,IAA/BC,EAA8B,uDAAtBR,EAAcS,EAAQ,uCAC7CC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAEd,OAAQD,GACN,IGRqB,YHSnB,MAAM,GAAN,mBAAWF,GAAX,CAAkBG,IACpB,IGTwB,eHUtB,OAAOH,EAAMI,QAAO,SAACL,GAAD,OAAWA,EAAMM,KAAOF,KAC9C,QACE,OAAOH,IEPXM,KDQa,WAAyC,IAA/BN,EAA8B,uDAAtBR,EAAcS,EAAQ,uCAC7CC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAEd,OAAQD,GACN,IEdyB,gBFgBvB,OADAR,aAAaa,QAAQ,QAASJ,EAAQK,QAC/B,2BACFR,GADL,IAEEJ,iBAAiB,EACjBC,SAAS,EACTJ,MAAOU,EAAQK,SAEnB,IExB0B,iBFyBxB,OAAO,2BACFR,GADL,IAEEJ,iBAAiB,EACjBC,SAAS,IAEb,IE7BuB,cF8BvB,IE5BsB,aF6BtB,IE5BkB,SF8BhB,OADAH,aAAae,WAAW,SACjB,2BACFT,GADL,IAEEP,MAAO,KACPG,iBAAiB,EACjBC,SAAS,IAEb,QACE,OAAOG,MGpCPU,EAAa,CAACC,KAQLC,EANDC,sBACZC,EALmB,GAOnBC,gCAAsBC,kBAAe,WAAf,EAAmBN,KCR5BO,EAFF,kBAAM,sCCEJC,EAFD,kBAAM,uCCELC,EAFC,kBAAM,yCCEPC,EAFE,kBAAM,0CCERC,EAFO,kBAAM,+CCEbC,EAFD,kBAAM,yCCELC,EAFA,kBAAM,yCCONC,EAPE,kBACf,yBAAKC,UAAU,YACb,wBAAIA,UAAU,qBAAd,iBACA,uBAAGA,UAAU,uBAAb,2CCDWC,EAFA,kBAAM,wCCQNC,EAPA,SAACC,GAAD,OACb,6BACE,kBAACC,EAAD,MACCD,EAAME,WCiCIC,G,MAnBH,kBACV,kBAAC,IAAD,CAAUnB,MAAOA,GACf,kBAAC,IAAD,KACE,kBAACoB,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,SAASC,UAAWE,IACtC,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,WAAWC,UAAWG,IACxC,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,YAAYC,UAAWI,IACzC,kBAAC,IAAD,CAAON,OAAK,EAACC,KAAK,gBAAgBC,UAAWK,IAC7C,kBAAC,IAAD,CAAOP,OAAK,EAACC,KAAK,SAASC,UAAWM,IACtC,kBAAC,IAAD,CAAOR,OAAK,EAACC,KAAK,UAAUC,UAAWO,IACvC,kBAAC,IAAD,CAAOP,UAAWQ,UCpBRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7495b190.chunk.js","sourcesContent":["import { SET_ALERT, REMOVE_ALERT } from \"../actions/types\";\n\nconst initialState = [];\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case SET_ALERT:\n      return [...state, payload];\n    case REMOVE_ALERT:\n      return state.filter((alert) => alert.id !== payload);\n    default:\n      return state;\n  }\n}\n","import {\n  SIGNUP_SUCCESS,\n  SIGNUP_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n} from \"../actions/types\";\n\nconst initialState = {\n  token: localStorage.getItem(\"token\"),\n  isAuthenticated: null,\n  loading: false,\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case LOGIN_SUCCESS:\n      localStorage.setItem(\"token\", payload.access);\n      return {\n        ...state,\n        isAuthenticated: true,\n        loading: false,\n        token: payload.access,\n      };\n    case SIGNUP_SUCCESS:\n      return {\n        ...state,\n        isAuthenticated: false,\n        loading: true,\n      };\n    case SIGNUP_FAIL:\n    case LOGIN_FAIL:\n    case LOGOUT:\n      localStorage.removeItem(\"token\");\n      return {\n        ...state,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport alert from \"./alert\";\nimport auth from \"./auth\";\n\nexport default combineReducers({\n  alert,\n  auth,\n});\n","export const SET_ALERT = \"SET_ALERT\";\nexport const REMOVE_ALERT = \"REMOVE_ALERT\";\nexport const SIGNUP_SUCCESS = \"SIGNUP_SUCCESS\";\nexport const SIGNUP_FAIL = \"SIGNUP_FAIL\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT = \"LOGOUT\";\n","import { createStore, applyMiddleware } from \"redux\";\nimport { componentWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport rootReducers from \"./reducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducers,\n  initialState,\n  componentWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React from \"react\";\n\nconst home = () => <div>Home</div>;\n\nexport default home;\n","import React from \"react\";\n\nconst about = () => <div>About</div>;\n\nexport default about;\n","import React from \"react\";\n\nconst contact = () => <div>Contact</div>;\n\nexport default contact;\n","import React from \"react\";\n\nconst listings = () => <div>Listings</div>;\n\nexport default listings;\n","import React from \"react\";\n\nconst listingDetail = () => <div>listingDetail</div>;\n\nexport default listingDetail;\n","import React from \"react\";\n\nconst login = () => <div> Login </div>;\n\nexport default login;\n","import React from \"react\";\n\nconst signUp = () => <div>Sign Up</div>;\n\nexport default signUp;\n","import React from \"react\";\n\nconst notFound = () => (\n  <div className=\"notfound\">\n    <h1 className=\"notfound__heading\">404 Not Found</h1>\n    <p className=\"notfound__paragraph\">The link you requested does not exist</p>\n  </div>\n);\n\nexport default notFound;\n","import React from \"react\";\n\nconst navbar = () => <div>Navbar</div>;\n\nexport default navbar;\n","import React from \"react\";\nimport Navbar from \"../components/Navbar\";\n\nconst layout = (props) => (\n  <div>\n    <Navbar />\n    {props.children}\n  </div>\n);\n\nexport default layout;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport Home from \"./containers/Home\";\nimport About from \"./containers/About\";\nimport Contact from \"./containers/Contact\";\nimport Listings from \"./containers/Listings\";\nimport LisitngDetail from \"./containers/ListingDetail\";\nimport Login from \"./containers/Login\";\nimport SignUp from \"./containers/SignUp\";\n\nimport NotFound from \"./components/NotFound\";\n\nimport Layout from \"./hocs/Layout\";\n\nimport \"./sass/main.scss\";\n\nconst App = () => (\n  <Provider store={store}>\n    <Router>\n      <Layout>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/about\" component={About} />\n          <Route exact path=\"/contact\" component={Contact} />\n          <Route exact path=\"/listings\" component={Listings} />\n          <Route exact path=\"/listings/:id\" component={LisitngDetail} />\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/signup\" component={SignUp} />\n          <Route component={NotFound} />\n        </Switch>\n      </Layout>\n    </Router>\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}